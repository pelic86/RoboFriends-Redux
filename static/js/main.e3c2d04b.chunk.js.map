{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","actions.js","api/api.js","constants.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","requestRobots","dispatch","link","fetch","then","response","json","data","payload","catch","error","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e3c2d04b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n// another way ===========\r\n// const Card = ({name, email, id}) => {\r\n    // return (\r\n    //     <div className='tc bg-light-blue br3 pa3 ma2 grow bw2 shadow-S'>\r\n    //         <img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\r\n\r\n    //         <div>\r\n    //         <h2>{name}</h2>\r\n    //         <p>{email}</p>\r\n    //         </div>\r\n\r\n    //     </div>\r\n    // );\r\n// }\r\n//=================================\r\nconst Card = (props) => {\r\n    const {name, email, id} = props;\r\n    return (\r\n        <div className='tc bg-light-blue br3 pa3 ma2 dib bw2 shadow-S'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\r\n\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\n\r\n\r\n// way # 2\r\nconst CardList = ({robots}) => {\r\n    // if (true) {\r\n    //     throw new Error('Nooooo!')\r\n    // }\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card \r\n                            key = {robots[i].id} \r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default CardList;\r\n\r\n// way # 1\r\n// const CardList = ({robots}) => {\r\n\r\n//     const cardArray = robots.map((user, i, id) => {\r\n//         return (\r\n//             <Card \r\n//                 key = {id} \r\n//                 id={robots[i].id} \r\n//                 name={robots[i].name} \r\n//                 email={robots[i].email}\r\n//             />\r\n//         );\r\n//     })\r\n//     return (\r\n//     <div>\r\n//         {\r\n\r\n//         // way # 0-0 \r\n//         /* <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\r\n//         <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\r\n//         <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\r\n//         <Card id={robots[3].id} name={robots[3].name} email={robots[3].email}/>\r\n//         <Card id={robots[4].id} name={robots[4].name} email={robots[4].email}/>\r\n//         <Card id={robots[5].id} name={robots[5].name} email={robots[5].email}/>\r\n//         <Card id={robots[6].id} name={robots[6].name} email={robots[6].email}/>\r\n//         <Card id={robots[7].id} name={robots[7].name} email={robots[7].email}/>\r\n//         <Card id={robots[8].id} name={robots[8].name} email={robots[8].email}/>\r\n//         <Card id={robots[9].id} name={robots[9].name} email={robots[9].email}/> */}\r\n\r\n        \r\n//         {cardArray}\r\n\r\n//     </div>\r\n//     )\r\n// }\r\n// export default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--gray bg-lightest-gray' \r\n                type='search' \r\n                placeholder='search your robots...'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\n// just make a Scroll into a Component which wrap with the CardList component\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px' }}> \r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import { apiCall } from './api/api'\r\nimport {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type : 'CHANGE_SEARCH_FIELD',\r\n    payload : text \r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    apiCall('https://jsonplaceholder.typicode.com/users')\r\n    // fetch('https://jsonplaceholder.typicode.com/users')\r\n    //     .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const apiCall = link =>\r\n  fetch(link).then(response => response.json())","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING' ;\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS' ;\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED' ;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions'\r\n\r\n// parameter state comes from index.js provider store state(rootReducers)\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending\r\n    }\r\n}\r\n\r\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\r\n// the function returns an object then uses connect to change the data from redecers.\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }    \r\n}\r\n\r\nclass App extends Component {\r\n    // updating states after we fetch whatever the users are\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }    \r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n\r\n        return isPending ? \r\n            <h1>Loading...</h1> :\r\n            (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboFriends!</h1>\r\n                    <SearchBox searchChange={onSearchChange}/>\r\n                    <Scroll>    \r\n                        <CardList robots={filteredRobots}/>    \r\n                    </Scroll>\r\n                </div>\r\n        );       \r\n    }\r\n} \r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots  = (state = initialStateSearch , action = {} ) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD: \r\n            return Object.assign( {}, state, {searchField: action.payload} );\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst initialStateRobots = {\r\n    isPending: true,\r\n    robots: []\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action= {}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS: \r\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload}) \r\n        default:\r\n            return state;               \r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\r\nconst store = \r\n    createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}